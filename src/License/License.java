package License;

import java.io.*;
import java.math.BigInteger;
import java.util.Date;

/**
 * Created by explorer on 2017/3/30.
 */
//License.License.License.License example
//AAIAADAAAAAAAgAAQ8yAwSSbaDaZEc/9Vh96kMcppEY6bXYr9y9yO1msaWKic5lDgFOahtOQOJER3paZW9ZdH/MyK8DQOvvmJ+52mAk5YiRVQ52jEnQuzpQjwC1ZkZtsKnh5hVnr6+kzJLQC+AtQsa3EG0gbjLi9MGXw6I+Su7wY6skuXLBJB2Diu3pytTy0HNeO2lKVGeyK7TQ6CL9isbEBolly3F99jN35XnsCw3tUQLvBgVMc3He57MOCOQVi8N/Btaa32OCSU+TNS4QhLqTk9DBrPkrqHZ/fCODwhaogGyQJHQcFOa1ForyKiZhzzSLvsP1JmqxmGKfF+G+lMNwtheomgo9/B/WJApQHQBWKP20skvTL2rVmBtQqMZZo08j5hSfhCksoOT7TnQuaD5uLojGc/ocnAY1Wcy5z4fEtCp0c2aGUbdqJ1XCBO5PNyRPBb5TMpyhMk3OonpflzIKK/tsMgdRxnaxKLqV7v30GKKeC8sdn/ntsIDhU+fctc4tAY5Xt7nZPT1oWm1LYMONxNV9ftQ3hZT/OI1sOId2Memrq6JlhsxD/mpFoa8HffhuAgekBdQSaItk/6UtfrfFD45POVTufEX7twEuW8Io1WzK5OM+2AMlo1wRtkI95egXxxIDJCOykj2aC2L5KGcfV4pj7VzpLf55qrwrYtJhH+vi5tG5z+fh5KlMe+XS5kwIVhiBnfez9CSr+9jyFRN2WJm953ruyXZUdUAJwrLe5ywgJgf6guLZI0uvANVdKMTaFrtbyP8W+txPmKSdeEpZDGqhkddblHbXNYpyqyntRk4k0R8s76/7P4Zc90nmJ8KwBjF3Kqf9VK7c6rXs+qiJzS4T3aGj50qsHxJ1S3GTLo6cI0wvY0/9uORe8Vrc25zpphcZQIcT9sbRlaMl6lW95ZICUlGAL4CWdPX083iGyeu04vBOAgSeIzrAsTDr6RaKHPFr2bTxnIs+dhb66pXWbn2PgzhHsHdJ8YK8EHb5TtJFS5LM0Zk0jnhk2ntGdC4YIPW64w6K4/SjsLlzvG52qRLZ8w1G+B3zEMzbtppLy4swBN3bt6X6mnvJdJkSLJR3+tJkXWPzlHNi3c+RCuscpeEZMiE1yEe7ClyQRuzMPPcapPZXIyNfzLISrrgfZmatfnkvmgn757g9BeFYsiyvLyy8N3gE5fNRii9Q/AxlU/kTFj/quzxuMu7UyDt05A7CpRZDGQVxGLyy8AS/Ij9kx5HwdL27uCzeCFlNtLpRiGay8+bslmVDDucTHGQPATIcLohhGaNIwf1pO5u8NKr6VxqJZovGdswWTABmzPaT7r6TaGmFki98YdG3KGs+cObeVrq+pj1+cdGDsmGsOil9ectAtuQHv4CHPF2MxIX7GBcpglP0e8Cektxx/NXiodGJCyf4wd/BQNBxJQlq9XkDld9aORcirBmUCNjHFDiOp3MSs+uBA0vqU/1VxCCkU

//key:
//N = 516720128792736720030581562128703325136875630469446254716104804660067345309759245738592988345107614739135505484730479241302573478560415270114896657923563780235903779810217886486496120349804574986697284198834702109857091546777106333001909921670176727056693971810578035876658509936767122332745941438853445860597296091127943810534157210028212486185048010395413596875236525438897880151275418768022111787444614303835133514092377299941410551941662634994493901197567112922866601878440961957909356198643252556838920906615520914368675938497018129253439293669644428369063232363403534650369545732584339039015212732692965345696507395490560970210787735137260237827487821544960380421018404243207530399404890571629124751749432145486968392518643501988602443212733291598573992884121584005811066693137362605620795556006922935600971759276219826637764049041045323375535478952271443507989525846301147017893794233579068075414211032110637215036294202742667751994300335977325675187969496856439534742734513520155046817657199286946761665999947091680770893814698773183412612774141283399850035092297234287585678836668521569864044736611646673080034829670986805444730844201787221516904010575089010357862676604077929153906872617773783908391088374300514551392306573
//e = 329052203682502641615897438194590734885572280543627319698393636232138124738946546969300811920530569359527495908262365025186074916264036869420493919868284227719951515705050543119958187569251792624450208413179888382518862504659260385807733601443705009766573161268841093271394374540850339997063989012558017754549460076697091672143700874980597897056828033045982507118754696458408213893741031165448164852046130494891326569412690432761843053483664666521475963662214855345625659280113443273701098337529727256276268941448528047465795039963941297588734629744305856417695426010612375072805329353700242613607975565519267586557577932096632135382922454733924589587165426595656108328262434448148949253150548560392358464320077673556367845383857696876795142608352394758494213584307922459510217896059314611461253324972852439589237566173522143327520718341299411756018717495989448875354519410989502881265787271389907341295276983609075366605480825179493701191809728093426229202872156438041652134265170326806742500360142051040691175641045152551100412669948033688825288468726764617442295962757557833771730337421368959719575506504278901781661846036006151183870524698448030864250172743738669153363856702305843783936046803966362483007057468586611364227183049
//d = 4830373391328949860567724053384210921178563914880669822993432322162906314444965722790869342649466761750105182592356137830734093431488756485646804488666084066245133038773015945455888784851713485706804128683929050694829548449746015209663938549

//sig:
//e = 0x10001
//d = 393428131005598154669082771807104354112852877643436379192162414646176600282613820604860628209048089507568769272361223414713652137321633696679458934945237831895487869975713353997885345753349101282522145816140762029699406021311127421898707642150148057275174077965219092833166489808025163257128530099789583857317695544763655413781938534825843983213933924114353734280891534346904800617435239048713814732091113110736269490639992085843527647905453372545600717576541136872957386045204864149140013726270690165090167361861036720688555777454265298549411219329420317340861027555449402704479676671019136822269585262030491321644208535210229044403003235847395607220597025235289297404224657311313907214980574371568765417103295266176695450724926269320873667682615629026595089991650394074666348981628395577739653343921685166787714365646880563394914370353636101546335939018122090053877091183935976221170623652425731577757333207106726336372395409322720890723921067006004355491878976639925770201291774355549817379503477254848979492941225665514218735211104102063875508888197907736700059710729406333298472982223974877319918752630263374442754117558481137313982442866093775161370966030091601413734215068756626503181054923380999725155320572250459691718022497
//N = 495638372644532818087495244625777518271001480952633308660119721822814883178687131617022624869024348199944916223957892794011929955089152811873470843479798004477616941574686211236773132609996540901015990741463556209688400530903605356367990518311373135012938440421486365134120799710671352973404184328743799878071389276021215732825091418186177715733566329335327374640859414987757101189205591125592197072335844064786492130407772890890916755618386407222348895233050949353023878536861158389569587474118684813146636007733012255656566067952408305544438181561497430655645864497741100016213997347056652376323128855439858324297391632910067248100872964508240295431478303397794927116862485841249589483990946745984706932592161259879785861815945521467805288600263540809073795983475301346481828295557472862285146823563286406692350364722785088453454391810874992079663522005486644608085359751143152276679514769419461454730361068693259849876266881929999173438661898468031502887967040833089452702219648337776476834472778941576152267993310288301517635431707873814466018447767021684087260884441995017076653273543815696101945663340816087385109823926995577940789662087031825064028691500133790864257705368674429563557293493866831160372529034388120518066125151

public class License {
    private static byte[] ek = new byte[]{80, -88, 54, -50, -40, -37, 121, 94, -52, -76, 44, -124, 66, -18, -77, 80, -116, -116, -24, -61, -109, 104, 65, 89, 10, 97, -27, 36, 62, -41, 30, -86, -94, -4, -89, -66, 30, 40, 64, -62, 32, 12, -76, 40, -107, -100, 9, 120, -92, 116, -67, -127, -27, -125, -128, -23, -26, -116, 113, 73, -28, 39, 95, -60, -45, -79, 113, -80, 69, 26, -48, -85, -53, -28, 37, 96, -1, -90, -8, -79, 27, 37, 112, -41, 41, -123, 10, 60, 99, 1, 37, -30, -46, 11, 67, 59, -39, -107, -127, -108, -2, 7, 111, -80, -10, 62, -82, -67, -118, 31, -92, -19, 45, 8, 96, 90, 15, 31, 90, 101, -54, 25, 120, -23, 45, 92, -6, 82, 97, 20, 122, 49, -93, -83, -55, 20, 119, -66, 113, 25, -119, 50, 116, -111, 57, -67, -16, -34, 55, 39, 28, -68, -97, -65, 9, 13, 101, -80, -126, 83, 62, -69, 103, 50, 51, 41, -79, 59, -21, -104, 59, 3, 71, -78, 102, -127, -62, -70, -114, 102, 30, -47, 115, 76, 15, 1, 14, -116, -30, -35, 56, -20, -29, 105, -98, 49, 59, -33, 51, 38, -126, -62, 63, 40, 84, -78, 125, -116, 8, 98, -121, -32, 10, -11, -45, 73, 32, -61, -124, -4, 108, -110, -44, -102, -30, 109, -70, -118, 29, -2, 85, 1, -62, -85, -120, -63, 126, -78, 19, 74, -2, 23, -85, -2, 21, 1, 65, -72, -118, -42, 72, -5, 50, -77, 56, 54, 10, -54, -16, -84, -26, 94, -30, 29, 25, 19, 53, -10, -95, -71, -78, -51, 45, 88, 113, 92, 122, 86, -31, -16, 124, -71, 86, -106, 94, -96, -87, 4, -115, -50, 32, -65, -83, -38, -64, -69, -90, 75, -77, 52, 69, -108, -13, -13, 13, 91, -89, -107, -90, 126, 40, 25, 25, 79, -8, 117, 6, 93, -59, -76, 15, -96, -60, 6, 114, -6, -45, 79, 127, -79, -49, 52, -15, 70, 56, -1, 35, -91, 101, 29, -40, -23, 122, 67, -83, 59, -126, 21, 83, -72, 48, 24, 115, -62, -79, 23, -75, 110, 124, 34, -77, 58, -32, -118, 2, -126, -60, -127, 70, -94, 105, -2, -92, -16, 54, 73, 58, -33, -87, -43, -76, 108, 118, -10, 86, -87, -72, 110, -54, -68, -108, -93, 22, 4, 103, -101, 34, 68, 27, 49, -109, 79, -69, 76, 113, 80, -35, 72, -77, -42, 39, 12, 70, 120, -93, 46, -92, -8, -45, 84, -122, 22, 79, -1, 43, -101, 102, -91, -82, 109, -3, 39, -58, -44, -127, -102, -55, -104, -103, -126, -99, 117, 10, 6, 81, -109, 67, 87, 58, -49, -44, -102, -84, 82, 87, 69, 1, 68, -71, 82, -21, 126, -78, -17, 24, -44, 46, -85, -51, 89, -17, -78, -96, -52, -58, 115, 11, 78, -46, -87, -46, -1, 90, 116, 66, 40, 112, 122, 28, -70, 93, -112, 82, -35, 98, -104, -106, -87, 70, -45, 114, 2, 94, -96, -14, -58, -67, -3, -75, 103, -15, -55};
    private static byte[] Nk = new byte[]{126, -88, 123, -39, -11, 54, 97, 76, 23, -98, 101, 108, 121, -96, -59, -24, 87, -118, -45, -35, -101, 84, -86, 122, 47, 78, -104, 97, -81, 57, -61, -106, 106, -53, 109, -26, 113, -19, -98, -78, 72, 99, 8, -32, 55, -117, 23, 80, 57, 61, 1, 47, 82, -32, 21, -24, -55, -128, 111, -54, -93, -97, 32, -97, -104, 28, 37, 75, -36, -119, 45, -23, -63, 3, 76, 82, 58, -31, 109, 109, 126, -108, -4, 71, 64, 11, -33, 95, -35, 14, 36, -62, 42, 34, -109, -69, -98, -24, 68, 28, -35, 93, 87, -124, -120, -22, 63, 89, 39, -17, 126, -113, 74, -87, 124, -26, 67, 92, 116, -27, 91, -7, -110, 74, 56, -33, -5, 81, 95, 93, -75, -37, 68, -98, -44, 126, -13, -21, -47, -96, 49, 34, 69, 33, -109, -72, 58, -6, 110, -47, -22, 34, -78, -95, -44, -6, -78, 44, 52, -53, -89, 61, -74, -14, 96, 23, 60, -113, 35, -99, -13, 53, 103, -82, -12, 62, 88, -110, -69, -68, -58, 39, -103, -73, 80, 59, -67, -62, -70, 35, -11, -22, 11, 78, -27, 119, 4, -44, 87, 54, 36, -120, 21, 69, 100, 92, 13, 110, 9, -8, -82, 87, 113, 13, 107, 119, -85, 88, 63, -27, -19, -5, -106, -15, 62, -7, 66, 14, -112, -11, 100, 31, -105, 123, -20, 92, 20, -46, 75, 53, 33, 50, 23, -106, 107, -95, -85, 3, -65, 1, 65, -1, 17, -79, 99, 12, 38, 14, 98, -103, 11, 31, 99, 113, -61, -52, 65, 19, -58, -81, 47, 97, -91, 104, -100, -44, 81, -26, -39, -104, -103, 37, -70, 99, 47, 111, -72, -106, 10, 74, 17, 82, 102, -7, 106, 39, -33, 111, 70, -119, 5, -28, -48, 32, -7, 105, -5, -6, 45, 122, -87, 10, -24, -92, -44, -106, 106, -35, 10, 118, -90, -6, -124, 0, 8, -22, -60, 16, -107, 15, 44, -46, 82, 115, -55, 77, 39, -77, 104, 14, 123, 101, -29, -90, 103, 17, 64, 58, -9, -39, 28, 47, -94, 72, -15, -28, 28, 38, -73, -1, 24, 56, -80, -105, 63, 58, -45, -120, 93, -116, -5, -120, -101, 114, 39, -62, 112, -94, 54, 96, -23, -68, -38, 94, 10, 42, 103, -61, 52, 116, 73, -111, 47, -123, -14, 95, 52, 60, -70, -28, 67, 98, -107, 77, 97, -81, -75, -80, -123, -79, 108, 94, 90, -13, -38, -70, 84, 38, 101, -114, 100, 109, -127, -116, -26, -117, -90, -114, 0, 122, 99, -80, 78, -72, 95, 74, -99, 95, 82, -42, -42, 50, 76, -91, 6, -49, 12, 61, -30, 8, -80, 76, -73, 50, -88, -84, 113, 18, -68, -50, 25, -30, 120, -98, 123, 80, 37, -71, 84, -5, 108, -46, -100, 69, -123, 119, -16, -101, -38, -5, -32, -96, 31, 70, -66, 123, 67, -118, -97, 88, -49, -26, -27, -19, -70, 112, -111, -37, -60, 40, 10, 95, 121, 113, -53, -108, 64, 19, 7, -85, 5, -115};

    private static byte[] es = new byte[]{1, 0, 1};
    private static byte[] Ns = new byte[]{121, 125, -105, 110, -103, -47, -69, 93, -65, -10, -33, -56, -102, -107, 117, 22, -43, -92, -24, -70, 105, -101, -104, -46, -127, -56, 43, -55, -20, 41, 101, -103, 40, -35, 57, 82, 86, 13, 72, -67, 127, 53, -32, 67, 122, 80, 18, 49, 12, 123, 56, -94, 114, 18, -128, -101, -121, -15, -111, 61, -125, 70, 60, 53, -2, 73, -25, -31, -61, 11, 46, 34, -106, 65, 58, 13, -6, 126, -120, -74, 16, -97, -40, 74, 17, -12, -6, 32, -116, 87, 127, 124, -28, -11, 38, 12, 24, 106, 31, -8, 18, -45, -76, 9, -85, -123, 68, 13, -102, -18, 124, -82, 120, 20, 85, 63, -22, -110, 48, -42, 123, 112, 57, -49, -86, -53, -59, 64, -58, -86, 86, -81, 87, 20, -69, 88, -88, 0, -51, -99, 102, -108, -82, -109, -124, -127, -47, 33, -27, -30, -62, -49, 45, -20, 113, 117, -78, 26, -44, 96, -78, 86, -23, -33, -95, -42, -69, 104, 124, 11, -84, 122, 109, 13, 21, -12, -63, 80, 107, 15, -83, 99, 41, 34, 4, -112, -86, -55, 14, 98, -33, 78, 106, 14, -78, -104, 68, -53, 113, 98, 33, 68, -73, 47, -2, -49, -44, 31, 121, 94, 75, 81, 44, 9, -79, -67, 27, 105, -80, 19, -5, -92, -73, -18, -95, 39, -118, 104, -123, -15, 115, 17, -29, -128, 79, -29, 91, 29, 11, -16, 78, 79, 102, 124, -92, 32, -5, -29, -57, -85, -72, 94, 82, 20, -37, -124, -11, 44, -29, 115, 75, -79, 70, -25, 108, -67, -126, 20, 75, 94, 99, -126, 43, -7, -53, -62, -125, 27, 10, 127, -111, -26, 23, -80, 120, 118, 61, 35, -55, -20, -103, 96, -124, 69, 38, -27, 64, -126, -29, -61, 123, -62, 21, 38, 102, -100, 111, 63, -84, 118, 37, -43, -122, -34, 58, 20, -24, -88, 120, 57, -119, 12, -100, -59, 39, 119, 40, -99, 109, -124, -35, 115, -25, 26, 115, -78, 38, -33, 127, 47, 8, 121, 95, -95, -64, -66, 63, 85, -55, -33, 61, 101, 2, -93, -76, 80, 69, 6, 111, 124, -74, -30, -102, -98, -26, 71, -81, 8, -81, 89, 7, 21, -115, -51, -21, 68, -80, -43, 55, 14, -88, -62, 61, -78, 24, 96, -119, -71, 30, -110, -96, 109, 42, 18, -32, -21, -71, -77, 94, -128, 46, -2, 16, 42, 124, -89, 58, -68, 32, -127, -39, 111, -87, -116, 107, 7, -89, -63, -24, 61, -1, 57, 39, 71, -107, 95, -14, 79, 90, -32, -113, 101, -94, 16, 37, 81, -81, -9, -16, -74, -64, -93, -127, 6, -33, -48, 17, -117, -104, 46, -67, -84, -96, -16, 35, -54, -4, 103, 123, -77, 16, -15, 121, -115, -108, 49, -10, 18, 28, -54, 79, -2, -51, -78, -106, 36, -100, -12, -63, 73, -57, -82, -4, 23, 33, -101, -6, -67, 114, 64, -126, 8, 28, -10, -75, -6, 86, 115, 2, -33, -71, 13, 44, -76, 122, 8, -76, 52, 1, 71, 57, 95};

//    private static void test() throws Exception {
////        String data = "1491998457.399855\0001\000explorer\000test license\000\006\006\006\006\006\006";
//        byte[] data = new byte[]{49 , 53 , 57 , 49 , 57 , 57 , 56 , 52 , 53 , 55 , 46 , 51 , 57 , 57 , 56 , 53 , 53 , 0 , 49 , 0 , 101 , 120 , 112 , 108 , 111 , 114 , 101 , 114 , 0 , 116 , 101 , 115 , 116 , 32 , 108 , 105 , 99 , 101 , 110 , 115 , 101 , -37 , -101 , -76 , -95 , 3 , 3 , 3};
//        byte[] key = new byte[] {60 , -36 , 112 , -80 , 1 , 77 , -58 , 8 , 28 , -100 , -56 , -104 , 6 , -51 , 70 , -64 , -100 , -100 , -32 , -28 , 3 , -49 , -122 , 3 , -100 , -72 , 0 , -56 , 72 , -49 , 4 , -117 , -36 , -72 , 76 , 8 , 74 , -53 , -52 , 69 , -36 , -80 , 84 , 124 , -63 , -117 , 77 , 2 , -48 , -16 , 96 , 48 , -50 , -117 , 13 , -118 , -16 , -28 , -84 , 64 , -64 , -118 , -51 , 66 , -32 , -12 , 0 , -44 , -58 , -118 , -119 , -121 , -32 , -28 , -72 , 72 , -56 , -114 , -117 , -127 , -32 , -20 , 68 , -120 , -49 , 6 , -53 , 0 , 104 , 108 , -64 , 112 , -62 , 70 , 75 , 15 , 108 , 108 , 48 , -24 , -118 , 69 , 11 , 66 , 44 , 92 , 76 , 68 , -116 , 69 , 79 , 1 , 60 , 92 , -116 , 56 , -119 , 77 , 70 , -122 , 60 , 28 , -108 , 12 , 12 , 77 , -121 , 9};
//        byte[] d =  des(data, key);
//    }

    public static void tmain() throws Exception {
//        test();
        System.out.println("This software is not free");
        System.out.println("If you want to use it, please register");
        System.out.print("License: ");
        BufferedReader strin = new BufferedReader(new InputStreamReader(System.in));
        String inputLicense = strin.readLine();
//        System.out.println(inputLicense);
        byte[] license = b64decode(inputLicense);


        byte[] head = new byte[12];
        if (license.length < 12) {
            throw new Exception("BadMessageException");
        }
        System.arraycopy(license, 0, head, 0, head.length);
        int var34 = 0;
        byte[] var37;
        int[] var100;

        var37 = head;
        Object var50 = null;
        var100 = new int[(var37.length + 3) >> 2];
        int var49 = 0;

        int var52;
        while (true) {
            if (var49 < var37.length) {
                var52 = var37[var49] & 255;
                var100[var49 >> 2] |= var52 << var49 % 4 * 8;
                ++var49;
                if (var34 != 0) {
                    break;
                }

                if (var34 == 0) {
                    continue;
                }
            }
            break;
        }
        int lenkey = var100[0];
        int lendata = var100[1];
        int lensig = var100[2];
        if (lenkey + lendata + lensig != license.length - 32) {
            throw new Exception("BadMessageException");
        }

        byte[] alldata = new byte[lenkey + lendata + lensig];
        System.arraycopy(license, 32, alldata, 0, lenkey + lendata + lensig);
        BigInteger sha = sha1(alldata);
        byte[] checksha = new byte[20];
        System.arraycopy(license, 12, checksha, 0, 20);
        BigInteger sha2 = new BigInteger(1, checksha);
        if (sha2.compareTo(sha) != 0) {
            throw new Exception("BadMessageException");
        }


//        System.out.println("1");

        byte[] enkey = new byte[lenkey];
        System.arraycopy(license, 32, enkey, 0, lenkey);
        BigInteger nenkey = new BigInteger(1, enkey);
        BigInteger DK = new BigInteger(1, ek);
        BigInteger NK = new BigInteger(1, Nk);
        BigInteger nkey = nenkey.modPow(DK, NK);

//        System.out.println("2");

        byte[] key = nkey.toByteArray();
        if (key[0] == 0) {
            System.arraycopy(key, 1, key, 0, key.length - 1);
        }
        byte[] endata = new byte[lendata];
        System.arraycopy(license, 32 + lenkey, endata, 0, lendata);
        byte[] data = des(endata, key);

        int CRC = crc(data);

        byte[] sig = new byte[lensig];
        System.arraycopy(license, 32 + lendata + lenkey, sig, 0, lensig);
        BigInteger nsig = new BigInteger(1, sig);
        BigInteger ES = new BigInteger(1, es);
        BigInteger NS = new BigInteger(1, Ns);
        BigInteger crc2 = nsig.modPow(ES, NS);
        byte[] CRC2Array = crc2.toByteArray();
        if (CRC2Array[0] == 0) {
            System.arraycopy(CRC2Array, 1, CRC2Array, 0, 4);
        }
        int i = 0;
        int tmp;
        int CRC2 = 0;
        while (i < 4) {
            tmp = CRC2Array[i] & 255;
            CRC2 |= tmp << i * 8;
            i++;
        }

        if (CRC2 != CRC) {
            throw new Exception("BadMessageException");
        }

//        System.out.println("aaaaa");

        String d = new String(data);
        String[] info = d.split("\0");
        long time = (long) Double.parseDouble(info[0]);
        long time2 = new Date().getTime() / 1000;
        if (time2 > time) {
            throw new Exception("BadMessageException");
        }

        if (info[1].compareTo("1") != 0) {
            throw new Exception("BadMessageException");
        }
        if (info[2].compareTo("explorer") != 0) {
            throw new Exception("BadMessageException");
        }
        System.out.println("welcome :" + info[2]);
        System.out.print("hare if you flag:");
        File file = new File("flag.txt");

        InputStream in = new FileInputStream(file);
        int len = in.available();
        byte[] flag = new byte[len];
        in.read(flag, 0, len);
        System.out.println(new String(flag));
    }

    private static int crc(byte[] data) {
        int[] crc_table = new int[]{0, 1996959894, -301047508, -1727442502, 124634137, 1886057615, -379345611,
                -1637575261, 249268274, 2044508324, -522852066, -1747789432, 162941995, 2125561021, -407360249,
                -1866523247, 498536548, 1789927666, -205950648, -2067906082, 450548861, 1843258603, -187386543,
                -2083289657, 325883990, 1684777152, -43845254, -1973040660, 335633487, 1661365465, -99664541,
                -1928851979, 997073096, 1281953886, -715111964, -1570279054, 1006888145, 1258607687, -770865667,
                -1526024853, 901097722, 1119000684, -608450090, -1396901568, 853044451, 1172266101, -589951537,
                -1412350631, 651767980, 1373503546, -925412992, -1076862698, 565507253, 1454621731, -809855591,
                -1195530993, 671266974, 1594198024, -972236366, -1324619484, 795835527, 1483230225, -1050600021,
                -1234817731, 1994146192, 31158534, -1731059524, -271249366, 1907459465, 112637215, -1614814043,
                -390540237, 2013776290, 251722036, -1777751922, -519137256, 2137656763, 141376813, -1855689577,
                -429695999, 1802195444, 476864866, -2056965928, -228458418, 1812370925, 453092731, -2113342271,
                -183516073, 1706088902, 314042704, -1950435094, -54949764, 1658658271, 366619977, -1932296973,
                -69972891, 1303535960, 984961486, -1547960204, -725929758, 1256170817, 1037604311, -1529756563,
                -740887301, 1131014506, 879679996, -1385723834, -631195440, 1141124467, 855842277, -1442165665,
                -586318647, 1342533948, 654459306, -1106571248, -921952122, 1466479909, 544179635, -1184443383,
                -832445281, 1591671054, 702138776, -1328506846, -942167884, 1504918807, 783551873, -1212326853,
                -1061524307, -306674912, -1698712650, 62317068, 1957810842, -355121351, -1647151185, 81470997,
                1943803523, -480048366, -1805370492, 225274430, 2053790376, -468791541, -1828061283, 167816743,
                2097651377, -267414716, -2029476910, 503444072, 1762050814, -144550051, -2140837941, 426522225,
                1852507879, -19653770, -1982649376, 282753626, 1742555852, -105259153, -1900089351, 397917763,
                1622183637, -690576408, -1580100738, 953729732, 1340076626, -776247311, -1497606297, 1068828381,
                1219638859, -670225446, -1358292148, 906185462, 1090812512, -547295293, -1469587627, 829329135,
                1181335161, -882789492, -1134132454, 628085408, 1382605366, -871598187, -1156888829, 570562233,
                1426400815, -977650754, -1296233688, 733239954, 1555261956, -1026031705, -1244606671, 752459403,
                1541320221, -1687895376, -328994266, 1969922972, 40735498, -1677130071, -351390145, 1913087877,
                83908371, -1782625662, -491226604, 2075208622, 213261112, -1831694693, -438977011, 2094854071,
                198958881, -2032938284, -237706686, 1759359992, 534414190, -2118248755, -155638181, 1873836001,
                414664567, -2012718362, -15766928, 1711684554, 285281116, -1889165569, -127750551, 1634467795,
                376229701, -1609899400, -686959890, 1308918612, 956543938, -1486412191, -799009033, 1231636301,
                1047427035, -1362007478, -640263460, 1088359270, 936918000, -1447252397, -558129467, 1202900863,
                817233897, -1111625188, -893730166, 1404277552, 615818150, -1160759803, -841546093, 1423857449,
                601450431, -1285129682, -1000256840, 1567103746, 711928724, -1274298825, -1022587231, 1510334235, 755167117};
        int m_crc = 0xFFFFFFFF;
        byte[] d = data;
        for (int i = 0; i < d.length; i++) {
            m_crc = crc_table[(m_crc ^ d[i]) & 0xff] ^ (m_crc >>> 8);
        }
        return ~m_crc;
    }

    private static byte[] des(byte[] data, byte[] key) throws Exception {
        int var34 = 0;
        byte var10001;
        int var72;

        byte[] var39 = data;
        byte[] var73;
        byte[] var37;
        int[] var100;

        var37 = key;
        Object var50 = null;
        var100 = new int[(var37.length + 3) >> 2];
        int var49 = 0;

        int var52;
        while (true) {
            if (var49 < var37.length) {
                var52 = var37[var49] & 255;
                var100[var49 >> 2] |= var52 << var49 % 4 * 8;
                ++var49;
                if (var34 != 0) {
                    break;
                }

                if (var34 == 0) {
                    continue;
                }
            }
            break;
        }

        int[] var11 = var100;
        if (var11.length != 32) {
            throw new Exception("CryptoFailureException");
        }
        Object var40 = null;
        byte[] var43 = var39;
//        int[] var11 = new int[]{876216579, 455999525, 1043334948, 439222784, 372376604, 707731490, 389426184, 973875457, 389160971, 907870729, 121057538, 840500228, 254150144, 924386310, 187632156, 874189824, 655302664, 890966315, 722417666, 1026621720, 957157408, 892536332, 689771012, 221709344, 940377620, 255209728, 1010368540, 220604441, 1008414755, 187049985, 943331329, 170788368};
//        int[] var11 = new int[]{943331329, 170788368, 1008414755, 187049985, 1010368540, 220604441, 940377620, 255209728, 689771012, 221709344, 957157408, 892536332, 722417666, 1026621720, 655302664, 890966315, 187632156, 874189824, 254150144, 924386310, 121057538, 840500228, 389160971, 907870729, 389426184, 973875457, 372376604, 707731490, 1043334948, 439222784, 876216579, 455999525};
        int[] var12 = new int[]{16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756};
        int[] var13 = new int[]{-2146402272, -2147450880, '耀', 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272, -2146402304, -2147483648, -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0, -2147483648, '耀', 1081376, -2146435072, 1048608, -2147483616, 0, 1081344, '耠', -2146402304, -2146435072, '耠', 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, '耀', -2146435072, -2147450880, 32, -2146402272, 1081376, 32, '耀', -2147483648, '耠', -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, '耠', -2147483648, -2146435040, -2146402272, 1081344};
        int[] var14 = new int[]{520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584};
        int[] var15 = new int[]{8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928};
        int[] var16 = new int[]{256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080};
        int[] var17 = new int[]{536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320, 536887312};
        int[] var18 = new int[]{2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154};
        int[] var19 = new int[]{268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696};
        int var20 = var39.length;
        var72 = var20 % 8;
        if (var34 == 0) {
            if (var72 != 0) {
                throw new Exception("CryptoFailureException");
            }

            var72 = 2;
        }

        int[] var21 = new int[var72];
        byte[] var22 = new byte[var20];
        int var23 = var20 / 8;
        int var24 = 0;

        int var25;
        int var26;
        int var27;
        int var28;
        int var29;
        int var30;
        label575:
        while (true) {
            if (var24 < var23) {
                var25 = var24 * 8;
                var72 = 0;
                if (var34 != 0) {
                    break;
                }

                var26 = 0;

                while (var26 < 2) {
                    var21[var26] = (var43[var25 + var26 * 4] & 255) << 24 | (var43[var25 + var26 * 4 + 1] & 255) << 16 | (var43[var25 + var26 * 4 + 2] & 255) << 8 | var43[var25 + var26 * 4 + 3] & 255;
                    ++var26;
                    if (var34 != 0) {
                        continue label575;
                    }

                    if (var34 != 0) {
                        break;
                    }
                }

                int var31 = 0;
                var29 = var21[0];
                var28 = var21[1];
//                var29 = var21[1];
//                var28 = var21[0];
                var27 = (var29 >>> 4 ^ var28) & 252645135;
                var28 ^= var27;
                var29 ^= var27 << 4;
                var27 = (var29 >>> 16 ^ var28) & '\uffff';
                var28 ^= var27;
                var29 ^= var27 << 16;
                var27 = (var28 >>> 2 ^ var29) & 858993459;
                var29 ^= var27;
                var28 ^= var27 << 2;
                var27 = (var28 >>> 8 ^ var29) & 16711935;
                var29 ^= var27;
                var28 ^= var27 << 8;
                var28 = var28 << 1 | var28 >>> 31 & 1;
                var27 = (var29 ^ var28) & -1431655766;
                var29 ^= var27;
                var28 ^= var27;
                var29 = var29 << 1 | var29 >>> 31 & 1;
                var30 = 0;

                label562:
                {
                    while (var30 < 8) {
                        var27 = var28 << 28 | var28 >>> 4;
                        var27 ^= var11[var31++];
                        var26 = var18[var27 & 63];
                        var26 |= var16[var27 >>> 8 & 63];
                        var26 |= var14[var27 >>> 16 & 63];
                        var26 |= var12[var27 >>> 24 & 63];
                        var27 = var28 ^ var11[var31++];
                        var26 |= var19[var27 & 63];
                        var26 |= var17[var27 >>> 8 & 63];
                        var26 |= var15[var27 >>> 16 & 63];
                        var26 |= var13[var27 >>> 24 & 63];
                        var29 ^= var26;
                        var27 = var29 << 28 | var29 >>> 4;
                        var27 ^= var11[var31++];
                        var26 = var18[var27 & 63];
                        var26 |= var16[var27 >>> 8 & 63];
                        var26 |= var14[var27 >>> 16 & 63];
                        var26 |= var12[var27 >>> 24 & 63];
                        var27 = var29 ^ var11[var31++];
                        var26 |= var19[var27 & 63];
                        var26 |= var17[var27 >>> 8 & 63];
                        var26 |= var15[var27 >>> 16 & 63];
                        var26 |= var13[var27 >>> 24 & 63];
                        var28 ^= var26;
                        ++var30;
                        if (var34 != 0) {
                            break label562;
                        }

                        if (var34 != 0) {
                            break;
                        }
                    }

                    var28 = var28 << 31 | var28 >>> 1;
                    var27 = (var29 ^ var28) & -1431655766;
                    var29 ^= var27;
                    var28 ^= var27;
                    var29 = var29 << 31 | var29 >>> 1;
                    var27 = (var29 >>> 8 ^ var28) & 16711935;
                    var28 ^= var27;
                    var29 ^= var27 << 8;
                    var27 = (var29 >>> 2 ^ var28) & 858993459;
                    var28 ^= var27;
                    var29 ^= var27 << 2;
                    var27 = (var28 >>> 16 ^ var29) & '\uffff';
                    var29 ^= var27;
                    var28 ^= var27 << 16;
                    var27 = (var28 >>> 4 ^ var29) & 252645135;
                    var29 ^= var27;
                    var28 ^= var27 << 4;
                    var21[0] = var28;
                    var21[1] = var29;
                }

                int var32 = var24 * 8;
                int var33 = 0;

                label551:
                {
                    while (var33 < 2) {
                        var22[var32 + var33 * 4] = (byte) (var21[var33] >>> 24);
                        var22[var32 + var33 * 4 + 1] = (byte) (var21[var33] >>> 16);
                        var22[var32 + var33 * 4 + 2] = (byte) (var21[var33] >>> 8);
                        var22[var32 + var33 * 4 + 3] = (byte) var21[var33];
                        ++var33;
                        if (var34 != 0) {
                            break label551;
                        }

                        if (var34 != 0) {
                            break;
                        }
                    }

                    ++var24;
                }

                if (var34 == 0) {
                    continue;
                }
            }

            byte var66 = var22[var22.length - 1];
            var72 = var22.length - var66;
            break;
        }

        byte[] var42 = new byte[var72];
        var72 = var22.length;
        if (var34 == 0) {
            if (var72 < var42.length) {
                throw new Exception("BadMessageException");
            }

            var72 = 0;
        }

        var25 = var72;

        while (true) {
            if (var25 < var42.length) {
                var73 = var42;
                if (var34 != 0) {
                    break;
                }

                var42[var25] = var22[var25];
                ++var25;
                if (var34 == 0) {
                    continue;
                }
            }

            var73 = var42;
            break;
        }
        return var73;
    }

    private static BigInteger sha1(byte[] data) {
        int var46 = 0;
        int var34 = 0;
        int var10000 = 2;
        int var63;
        int var13;
        int var14;
        int var17;
        int var18;
        int var10002;
        int var19;
        int var20;
        int var21;
        int var22;
        int var23;
        int var79;
        int var136;
        byte var138;
        int[] var139;
        int[] var94;
        int var24;
        int var26;
        byte[] var72;
        int var25;
        byte[] var37;
        int[] var15;

        var37 = data;
        Object var50 = null;
        var15 = new int[((data.length + 8 >> 6) + 1) * 16];
        int var49 = 0;

        int var52;
        while (true) {
            if (var49 < var37.length) {
                var52 = var37[var49] & 255;
                var15[var49 >> 2] |= var52 << 24 - var49 % 4 * 8;
                ++var49;
                if (var34 != 0) {
                    break;
                }

                if (var34 == 0) {
                    continue;
                }
            }

            var15[var49 >> 2] |= 128 << 24 - var49 % 4 * 8;
            var15[var15.length - 1] = var37.length * 8;
            break;
        }

        int[] var66 = var15;


        int[] var68 = new int[80];
        int var71 = 1732584193;
        int var76 = -271733879;
        var13 = -1732584194;
        var14 = 271733878;
        var79 = -1009589776;
        var63 = 0;

        int var85;
        label1011:
        {
            while (var63 < var66.length) {
                var85 = var71;
                var17 = var76;
                var18 = var13;
                var19 = var14;
                var20 = var79;
                var138 = 0;
                if (var46 != 0) {
                    break label1011;
                }
                var21 = 0;

                while (true) {
                    if (var21 < 80) {
                        var10000 = var21;
                        var136 = 16;
                        if (var46 != 0) {
                            break;
                        }

                        label1002:
                        {
                            if (var46 == 0) {
                                if (var21 < 16) {
                                    var68[var21] = var66[var63 + var21];
                                    if (var46 == 0) {
                                        break label1002;
                                    }
                                }

                                var10000 = var68[var21 - 3] ^ var68[var21 - 8] ^ var68[var21 - 14];
                                var136 = var68[var21 - 16];
                            }

                            var22 = var10000 ^ var136;
                            var23 = var22 << 1 | var22 >>> 31;
                            var68[var21] = var23;
                        }

                        label1347:
                        {
                            var22 = var71 << 5 | var71 >>> 27;
                            var10000 = var22 + var79 + var68[var21];
                            var136 = var21;
                            var10002 = 20;
                            if (var46 == 0) {
                                if (var21 < 20) {
                                    var136 = 1518500249 + (var76 & var13 | ~var76 & var14);
                                    break label1347;
                                }

                                var136 = var21;
                                var10002 = 40;
                            }

                            if (var46 == 0) {
                                if (var136 < var10002) {
                                    var136 = 1859775393 + (var76 ^ var13 ^ var14);
                                    break label1347;
                                }

                                var136 = var21;
                                var10002 = 60;
                            }

                            if (var46 == 0) {
                                if (var136 < var10002) {
                                    var136 = -1894007588 + (var76 & var13 | var76 & var14 | var13 & var14);
                                    break label1347;
                                }

                                var136 = -899497514;
                                var10002 = var76 ^ var13 ^ var14;
                            }

                            var136 += var10002;
                        }

                        var23 = var10000 + var136;
                        var79 = var14;
                        var14 = var13;
                        var13 = var76 << 30 | var76 >>> 2;
                        var76 = var71;
                        var71 = var23;
                        ++var21;
                        if (var46 == 0) {
                            continue;
                        }
                    }

                    var71 += var85;
                    var76 += var17;
                    var13 += var18;
                    var14 += var19;
                    var10000 = var79;
                    var136 = var20;
                    break;
                }

                var79 = var10000 + var136;
                var63 += 16;
                if (var46 != 0) {
                    break;
                }
            }

            var138 = 5;
        }

        var139 = new int[var138];
        var139[0] = var71;
        var139[1] = var76;
        var139[2] = var13;
        var139[3] = var14;
        var139[4] = var79;
        var94 = var139;

        byte[] var100 = new byte[20];
        var24 = 0;

        while (var24 < 20) {
            var25 = var94[var24 / 4];
            var26 = (3 - var24 % 4) * 8;
            var100[var24] = (byte) (var25 >>> var26);
            ++var24;
        }

        var72 = new byte[var100.length];
        System.arraycopy(var100, 0, var72, 0, var100.length);
        return new BigInteger(1, var72);

    }

    private static byte[] b64decode(String str) {
        int var34 = 0;
        byte[] var2 = str.getBytes();
        int var3 = 0;
        int var4 = 0;

        byte var10001;
        int var72;
        while (true) {
            if (var4 < var2.length) {
                char var5 = (char) var2[var4];
                var72 = var5;
                if (var34 != 0) {
                    break;
                }

                label744:
                {
                    label754:
                    {
                        var10001 = 48;
                        if (var34 == 0) {
                            label741:
                            {
                                if (var5 >= 48) {
                                    var72 = var5;
                                    var10001 = 57;
                                    if (var34 != 0) {
                                        break label741;
                                    }

                                    if (var5 <= 57) {
                                        break label754;
                                    }
                                }

                                var72 = var5;
                                var10001 = 65;
                            }
                        }

                        if (var34 == 0) {
                            label732:
                            {
                                if (var72 >= var10001) {
                                    var72 = var5;
                                    var10001 = 90;
                                    if (var34 != 0) {
                                        break label732;
                                    }

                                    if (var5 <= 90) {
                                        break label754;
                                    }
                                }

                                var72 = var5;
                                var10001 = 97;
                            }
                        }

                        if (var34 == 0) {
                            label723:
                            {
                                if (var72 >= var10001) {
                                    var72 = var5;
                                    var10001 = 122;
                                    if (var34 != 0) {
                                        break label723;
                                    }

                                    if (var5 <= 122) {
                                        break label754;
                                    }
                                }

                                var72 = var5;
                                var10001 = 43;
                            }
                        }

                        if (var34 == 0) {
                            if (var72 == var10001) {
                                break label754;
                            }

                            var72 = var5;
                            var10001 = 47;
                        }

                        if (var34 == 0) {
                            if (var72 == var10001) {
                                break label754;
                            }

                            var72 = var5;
                            var10001 = 61;
                        }

                        if (var72 != var10001) {
                            break label744;
                        }
                    }

                    ++var3;
                }

                ++var4;
                if (var34 == 0) {
                    continue;
                }
            }

            var72 = var3;
            break;
        }

        char[] var35 = new char[var72];
        int var36 = 0;
        int var6 = 0;

        byte[] var73;
        while (true) {
            if (var6 < var2.length) {
                var73 = var2;
                if (var34 != 0) {
                    break;
                }

                label694:
                {
                    char var7;
                    label756:
                    {
                        var7 = (char) var2[var6];
                        char var74 = var7;
                        var10001 = 48;
                        if (var34 == 0) {
                            label691:
                            {
                                if (var7 >= 48) {
                                    var74 = var7;
                                    var10001 = 57;
                                    if (var34 != 0) {
                                        break label691;
                                    }

                                    if (var7 <= 57) {
                                        break label756;
                                    }
                                }

                                var74 = var7;
                                var10001 = 65;
                            }
                        }

                        if (var34 == 0) {
                            label682:
                            {
                                if (var74 >= var10001) {
                                    var74 = var7;
                                    var10001 = 90;
                                    if (var34 != 0) {
                                        break label682;
                                    }

                                    if (var7 <= 90) {
                                        break label756;
                                    }
                                }

                                var74 = var7;
                                var10001 = 97;
                            }
                        }

                        if (var34 == 0) {
                            label673:
                            {
                                if (var74 >= var10001) {
                                    var74 = var7;
                                    var10001 = 122;
                                    if (var34 != 0) {
                                        break label673;
                                    }

                                    if (var7 <= 122) {
                                        break label756;
                                    }
                                }

                                var74 = var7;
                                var10001 = 43;
                            }
                        }

                        if (var34 == 0) {
                            if (var74 == var10001) {
                                break label756;
                            }

                            var74 = var7;
                            var10001 = 47;
                        }

                        if (var34 == 0) {
                            if (var74 == var10001) {
                                break label756;
                            }

                            var74 = var7;
                            var10001 = 61;
                        }

                        if (var74 != var10001) {
                            break label694;
                        }
                    }

                    var35[var36] = var7;
                    ++var36;
                }

                ++var6;
                if (var34 == 0) {
                    continue;
                }
            }

            var73 = (new String(var35)).getBytes();
            break;
        }

        byte[] var37 = var73;
        Object var38 = null;
        int var8 = var37.length;

        while (var37[var8 - 1] == 61) {
            --var8;
            if (var34 != 0) {
                break;
            }
        }

        byte[] var39 = new byte[var8 - var37.length / 4];
        int var9 = 0;

        byte var75;
        int var76;
        while (true) {
            if (var9 < var37.length) {
                var75 = var37[var9];
                if (var34 != 0) {
                    break;
                }

                label758:
                {
                    var10001 = 61;
                    if (var34 == 0) {
                        if (var75 == 61) {
                            var37[var9] = 0;
                            if (var34 == 0) {
                                break label758;
                            }
                        }

                        var75 = var37[var9];
                        var10001 = 47;
                    }

                    if (var34 == 0) {
                        if (var75 == var10001) {
                            var37[var9] = 63;
                            if (var34 == 0) {
                                break label758;
                            }
                        }

                        var75 = var37[var9];
                        var10001 = 43;
                    }

                    if (var34 == 0) {
                        if (var75 == var10001) {
                            var37[var9] = 62;
                            if (var34 == 0) {
                                break label758;
                            }
                        }

                        var75 = var37[var9];
                        var10001 = 48;
                    }

                    if (var34 == 0) {
                        label631:
                        {
                            if (var75 >= var10001) {
                                var75 = var37[var9];
                                var10001 = 57;
                                if (var34 != 0) {
                                    break label631;
                                }

                                if (var75 <= 57) {
                                    var37[var9] -= -4;
                                    if (var34 == 0) {
                                        break label758;
                                    }
                                }
                            }

                            var75 = var37[var9];
                            var10001 = 97;
                        }
                    }

                    if (var34 == 0) {
                        label624:
                        {
                            if (var75 >= var10001) {
                                var75 = var37[var9];
                                var10001 = 122;
                                if (var34 != 0) {
                                    break label624;
                                }

                                if (var75 <= 122) {
                                    var37[var9] = (byte) (var37[var9] - 71);
                                    if (var34 == 0) {
                                        break label758;
                                    }
                                }
                            }

                            var75 = var37[var9];
                            var10001 = 65;
                        }
                    }

                    label759:
                    {
                        if (var34 == 0) {
                            if (var75 < var10001) {
                                break label758;
                            }

                            var73 = var37;
                            var76 = var9;
                            if (var34 != 0) {
                                break label759;
                            }

                            var75 = var37[var9];
                            var10001 = 90;
                        }

                        if (var75 > var10001) {
                            break label758;
                        }

                        var73 = var37;
                        var76 = var9;
                    }

                    var73[var76] = (byte) (var37[var9] - 65);
                }

                ++var9;
                if (var34 == 0) {
                    continue;
                }
            }

            var9 = 0;
            var75 = 0;
            break;
        }

        int var10 = var75;

        label588:
        {
            while (true) {
                if (var10 < var39.length - 2) {
//                    var39[var10] = (byte) (var37[var9] << 2 & 255 | var37[var9 + 1] >>> 4 & 3);
//                    var39[var10 + 1] = (byte) (var37[var9 + 1] << 4 & 255 | var37[var9 + 2] >>> 2 & 15);
//                    var39[var10 + 2] = (byte) (var37[var9 + 2] << 6 & 255 | var37[var9 + 3] & 63);
//                    var9 += 4;
//                    var10 += 3;
                    var39[var10++] = (byte) (var37[var9] << 2 | var37[++var9] >>> 4);
                    var39[var10++] = (byte) (var37[var9] << 4 | var37[++var9] >>> 2);
                    var39[var10++] = (byte) (var37[var9] << 6 | var37[++var9]);
                    var9++;
                    if (var34 != 0) {
                        break;
                    }

                    if (var34 == 0) {
                        continue;
                    }
                }

                var72 = var10;
                var76 = var39.length;
                if (var34 != 0) {
                    break label588;
                }

                if (var10 < var76) {
                    var39[var10] = (byte) (var37[var9] << 2 | var37[++var9] >>> 4);
                }

                ++var10;
                break;
            }

            var72 = var10;
            var76 = var39.length;
        }

        if (var72 < var76) {
            var39[var10] = (byte) (var37[var9] << 4 | var37[++var9] >>> 2);
        }

        return var39;
    }
}